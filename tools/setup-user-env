#!/bin/bash -xv

user_local_conf=$(mktemp --dry-run --tmpdir=/tmp userXXX)
local_conf="conf/local.conf"

cfg_chrome() {
cat << EOP >> ${user_local_conf}
# Add Chromium
IMAGE_INSTALL_append = \\
    "\${@bb.utils.contains('DISTRO_FEATURES', 'wayland', ' chromium-ozone-wayland', \\
        bb.utils.contains('DISTRO_FEATURES',     'x11', ' chromium-x11', \\
                                                        '', d), d)}"
EOP
}

cfg_rootfs() {
cat << EOP >> ${user_local_conf}
IMAGE_FEATURES += "read-only-rootfs"
EOP
}

configure_qt5() {
cat << EOP >> ${user_local_conf}

#Add qt5.14
PACKAGECONFIG_append_pn-qtbase = " accessibility"

IMAGE_INSTALL_append = " \\
    qt3d \\
    qt3d-dev \\
    qt3d-mkspecs \\
	qt3d-qmlplugins \\
	qt3d-tools \\
    qtcharts \\
    qtcharts-dev \\
    qtcharts-mkspecs \\
    qtconnectivity-dev \\
    qtconnectivity-mkspecs \\
    qtquickcontrols2 \\
	qtquickcontrols \\
    qtquickcontrols-qmlplugins \\
    qtquickcontrols2 \\
    qtquickcontrols2-qmlplugins \\
    qtquickcontrols2-dev \\
    qtquickcontrols2-mkspecs \\
    qtdeclarative \\
    qtdeclarative-dev \\
    qtdeclarative-mkspecs \\
	qtdeclarative-plugins \\
	qtdeclarative-tools \\
	qtdeclarative-qmlplugins \\
    qtgraphicaleffects \\
    qtgraphicaleffects-dev \\
	qtgraphicaleffects-qmlplugins \\		
	qtsvg \\
	qtsvg-plugins \\
	qtsensors \\
	qtimageformats-plugins \\
	qtsystems \\
	qtsystems-tools \\
	qtsystems-qmlplugins \\
	qtscript \\
	qtconnectivity-dev \\
	qtconnectivity-mkspecs \\
	qtconnectivity-qmlplugins \\
	qtlocation-plugins \\
	qtlocation-qmlplugins \\
	qtvirtualkeyboard \\
"

IMAGE_INSTALL_append = " \\
	qtmultimedia \\
	qtmultimedia-plugins \\
	qtmultimedia-qmlplugins \\
"

IMAGE_INSTALL_append = " \\
	gstreamer1.0 \\
   	gstreamer1.0-libav \\
   	gstreamer1.0-plugins-good \\
   	gstreamer1.0-plugins-bad \\
"

IMAGE_INSTALL_append = " \\
    qtbase \\
    qtbase-dev \\
    qtbase-mkspecs \\
    qtbase-plugins \\
    qtbase-tools \\
"

EOP
}


configure_sftp() {
cat << EOP >> ${user_local_conf}

#Add openssh
CORE_IMAGE_EXTRA_INSTALL += " openssh "

IMAGE_INSTALL_append = " \\
	openssh-sftp-server \\
"

EOP
}


configure_mono() {
cat << EOP >> ${user_local_conf}

#Add mono packages
IMAGE_INSTALL_append = " \\
	mono \\
"

EOP
}

configure_deploy() {
cat << EOP >> ${user_local_conf}

#Add additional dependecies added by compulab on cl_deploy
IMAGE_INSTALL_append = " \\
	parted \\
	zlib \\
"

EOP
}

configure_xmlsec() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	xmlsec1 \\
"

PREFERRED_VERSION_xmlsec1-\${TARGET_ARCH} ?= "1.2.29"

EOP
}

configure_dpkg() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	dpkg \\
"

EOP
}

configure_marlinui() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	marlinui \\
"

EOP
}

configure_boost() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	boost \\
"
PREFERRED_VERSION_boost-\${TARGET_ARCH} ?= "1.67.0"

EOP
}

configure_curl() {
cat << EOP >> ${user_local_conf}
#Check curl recipe for comple set of options. For debugging you may also add
CORE_IMAGE_EXTRA_INSTALL += " curl "

#.NET dependencies
CORE_IMAGE_EXTRA_INSTALL += " libunwind icu libcurl openssl "

#It is strongly recommended to use curl with OpenSSL backend.
PACKAGECONFIG_pn-curl = 'vers krb5 ssl zlib ipv6'

EOP
}

configure_dotnet() {
cat << EOP >> ${user_local_conf}

#.NET dependencies
CORE_IMAGE_EXTRA_INSTALL += " libunwind icu libcurl openssl "

#It is strongly recommended to use curl with OpenSSL backend.
PACKAGECONFIG_pn-curl = 'vers krb5 ssl zlib ipv6'

#Check curl recipe for comple set of options. For debugging you may also add
CORE_IMAGE_EXTRA_INSTALL += " curl "

PREFERRED_VERSION_dotnet-core = "3.1.0"
CORE_IMAGE_EXTRA_INSTALL  += " aspnet-core "
#CORE_IMAGE_EXTRA_INSTALL  += " vsdbg "
EOP
}

configure_python() {
cat << EOP >> ${user_local_conf}

# Add python 3
IMAGE_INSTALL_append = " \\
		python3 \\
		python3-pip \\ 
		python3-aws-iot-device-sdk-python \\ 
		python3-requests \\ 
		python3-boto3 \\ 
		python3-botocore \\ 
		python3-python-dateutil \\
		python3-six \\
		python-six \\ 
"
EOP
}

configure_git() {
cat << EOP >> ${user_local_conf}

# Add git
CORE_IMAGE_EXTRA_INSTALL += " git "

EOP
}

configure_gcc() {
cat << EOP >> ${user_local_conf}
GCCVERSION ?= "8.%"
PREFERRED_VERSION_gcc-cross-\${TARGET_ARCH} ?= "8%"

EOP
}

upgrade_lttng() {
cat << EOP >> ${user_local_conf}
#Upgrade lttng to 2.11.0 because the version from sumo branch has an issue related to .net core 3 or greater
PREFERRED_VERSION_lttng-\${TARGET_ARCH} ?= "2.11.0"

EOP
}

add_libstdc() {
cat << EOP >> ${user_local_conf}
IMAGE_INSTALL_append = " \\
	libstdc++\\
	libstdc++-staticdev \\
"

TOOLCHAIN_TARGET_TASK_append = " libstdc++-staticdev"

EOP
}

configure_virtualkeyboard() {
cat << EOP >> ${user_local_conf}
MACHINE_FEATURES += " touchscreen "

EOP
}

configure_cmake() {
cat << EOP >> ${user_local_conf}

PREFERRED_VERSION_cmake-\${TARGET_ARCH} ?= "3.16.5"

EOP
}

configure_libarchive() {
cat << EOP >> ${user_local_conf}

PREFERRED_VERSION_libarchive-${TARGET_ARCH} ?= "3.4.1"

EOP
}

configure_libxcrypt() {
cat << EOP >> ${user_local_conf}

PREFERRED_VERSION_libxcrypt-${TARGET_ARCH} ?= "4.1.1"

EOP
}

configure_systemd() {
cat << EOP >> ${user_local_conf}

# Enable systemd
DISTRO_FEATURES_append = " systemd "
DISTRO_FEATURES_BACKFILL_CONSIDERED = "sysvinit"
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = ""

EOP
}

fix_firmware_bcm4339_issue() {
cat << EOP >> ${user_local_conf}
RREPLACES_\${PN}-bcm4339 += "linux-firmware-bcm4339"
RCONFLICTS_\${PN}-bcm4339 += "linux-firmware-bcm4339 linux-firmware"
EOP
}

remove_packagegroup_qt5_demos() {
cat << EOP >> ${user_local_conf}
QT5_IMAGE_INSTALL_remove += " packagegroup-qt5-demos"
EOP
}

#this fix was moved to qtbase_%.bbappend under marlin layer
remove_xcb_xinput() {
cat << EOP >> ${user_local_conf}
#xcb-input case configuration issue on qt5, possible because of the old version of xorg-lib from sumo branch of poky layers (xorg-lib is located under the poky folder, meta\recipes-graphics)
PACKAGECONFIG_X11_remove += " xcb-xinput "
EOP
}

configure_vim() {
cat << EOP >> ${user_local_conf}
#vim is a text editor.
IMAGE_INSTALL_append = " \\
	vim \\
"

EOP
}

configure_libusb() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	libusb1 \\
	libusb-compat \\
"

PREFERRED_VERSION_libusb1-${TARGET_ARCH} ?= "1.0.21"

EOP
}

configure_zsh() {
cat << EOP >> ${user_local_conf}

IMAGE_INSTALL_append = " \\
	zsh \\
"

PREFERRED_VERSION_zsh-${TARGET_ARCH} ?= "5.0.5"

EOP
}

configure_dmidecode() {
cat << EOP >> ${user_local_conf}
# dmidecode is a CLI tool for depositing a computer’s DMI (SMBIOS) table contents in a human-readable format. 
# This table contains a description of the system’s hardware components. 
# It also includes useful pieces of information such as serial numbers and BIOS revision.

IMAGE_INSTALL_append = " \\
	dmidecode \\
"

EOP
}

cat << EOG
--- Users' Configurations started ---
EOG

cfg_chrome
configure_qt5
configure_sftp
#configure_curl
configure_mono
configure_dotnet
configure_deploy
configure_xmlsec
configure_boost
configure_python
configure_git
configure_gcc
upgrade_lttng
configure_dpkg
configure_virtualkeyboard
configure_cmake
configure_libarchive
configure_libxcrypt
configure_systemd
remove_packagegroup_qt5_demos
fix_firmware_bcm4339_issue
configure_vim
configure_zsh
configure_libusb
configure_dmidecode

if [[ -f ${local_conf} ]];then
echo "Write local configuration"
cat << EOH >> ${local_conf}

# Users' Configurations
EOH
cat ${user_local_conf} >> ${local_conf}
fi

rm -rf ${user_local_conf}
